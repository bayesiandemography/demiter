% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cohort.R
\name{cohort}
\alias{cohort}
\alias{iter_create_cohort}
\alias{iter_next_cohort}
\alias{iter_has_next_cohort}
\title{Cohort iterators}
\usage{
iter_create_cohort(spec, i)

iter_next_cohort(iter)

iter_has_next_cohort(iter)
}
\arguments{
\item{spec}{An object of class \code{\link{SpecIterCohort}}.}

\item{i}{The index of a cell in the array.}

\item{iter}{A cohort iterator.}
}
\description{
A cohort iterator traverses an array with a time
dimension, identifying the cell or cells that
a cohort occupies at each time.
}
\details{
A cohort is defined, for the purposes of the iterator,
as a group that shares one or more characteristics,
such as region and sex. The cohort can occupy multiple cells
at a given time, eg multiple regions or multiple iterations.
The array being traversed can include an age dimension,
but does not necessarily do so.
The composition of the cohort can change over time
due to events such as migration or death.

The iterator does not need to start at the earliest
time contained in the array, and typically does not.
The initial position of the iterator within the array
is controlled by the \code{i} argument to function
\code{iter_create_cohort}.

\code{iter_create_cohort} creates a new
iterator based on the information contained in
a \code{\link{SpecIterCohort}} object, and the value
\code{i}. If the cohort' occupies a single
cell at each time, then \code{i}
is the index for the first cell that the cohort occupies.
If the cohort occupies multiple cells at a time,
then \code{i} is the index for the cell that,
among all the first cells, has the lowest index.
For instance, if the cohort initially occupies
cells \code{21}, \code{23}, and \code{25}, then
\code{i} would be \code{21}.

\code{iter_next_cohort} moves the iterator
forward and returns indices for all cells now
occupied by the cohort.

\code{iter_has_next_cohort} returns \code{TRUE}
if the cohort has additional positions it
can occupy within the array, and \code{FALSE}
otherwise.

If the array does not have an Lexis triangle dimension,
then the iterator advances along the time dimension with
each call to \code{iter_next_cohort}. If the array does have
a Lexis triangle dimension, then it advances along the
time dimension only when entering an "upper" Lexis triangle.

If an array has an age dimension, the cohort's behaviour
when it reachs the oldest age group depends on the value for 
\code{stop_at_oldest} that was supplied when the
\code{\link{SpecIterCohort}} object was created.
If \code{stop_at_oldest} is \code{TRUE}, then the
cohort will stop at this point. If \code{stop_at_oldest}
is \code{FALSE}, then the cohort
will remain in the oldest age group, but will continue advancing
along the time dimension.
}
\examples{
## No age, cohort occupies one cell
spec <- SpecIterCohort(dim = c(2, 3),
                       i_time = 2)
iter <- iter_create_cohort(spec = spec,
                           i = 2)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)

## With age, cohort occupies one cell
spec <- SpecIterCohort(dim = c(3, 5),
                       i_age = 1,
                       i_time = 2,
                       stop_at_oldest = FALSE)
iter <- iter_create_cohort(spec = spec,
                           i = 5)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)

## No age, cohort occupies two cells
spec <- SpecIterCohort(dim = c(2, 3),
                      i_time = 2,
                      offset = c(0, 1))
iter <- iter_create_cohort(spec = spec,
                           i = 3)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
iter_next_cohort(iter)
iter_has_next_cohort(iter)
}
\seealso{
\code{\link{SpecIterCohort}}, \code{\link{collapse}},
\code{\link{increment}}.
}
